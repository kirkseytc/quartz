// this is an implementation of a clamp function 
// with the use of function contracts
//
// in this example, after adding the ':' you can specifiy 
// boolean functions that will run before the function does.
// if the caller "breaks the contract" then the function
// will not run and then and error will be thrown

int clamp(int lowBound, int highBound, int* value) : value != null {

    if(*value > highBound){
        *value = highBound;
        return *value;
    }

    if(*value < lowBound){
        *value = lowBound;
        return *value;
    }

    return *value;

}

// an Example of the function being used:
// 
// using std.io;
// 
// int main(){
// 
//     int numToBeClamped = 9;
//     int* ptrToNum;                          // if a pointer isn't initilized, it is initialized as null
// 
//     try {                                   // in this try block, the function will run because the contract is upheld
// 
//         clamp(0, 7, &numToBeClamped);
// 
//     }
// 
//     try {                                   // in this try block, the function will not run and cause a crash dump.
// 
//         clamp(0, 7, ptrToNum);
// 
//     }
// 
// 
// 
//     return 0;
// }
//
// a weird quirk of contracts
//
// if the function with a contract is not wrapped in a try block, the contract is ignored.
//
// for example:
// 
//      try {
//          
//          clamp(0, 7, NULL);
//      
//      } 
//
// creates a crash dump while:
// 
//      clamp(0, 7, NULL);
// 
// does not.
// 
// The reason being, when compiled, the try block 
// can add overhead which some may not desire.
//
// To comprimise, I have left the ability for 
// the contract to be ignored if you believe that
// the check is no longer needed.
//
// Contracts are great for testing dynamic variables that
// the compiler may not know what the value will be.
// 
// The flag --check-contracts will tell the compiler to check all static contracts,
// whether or not they are in a try block and stop compilation if they are broken.
