// main.qz

using std.overflow;

int main(){
    uint a = 19;
    uint b = 81;

    float c = 0.75;
    float d = 0.5;

    println("sub($c, $d): " + sub(c, d));
    println("sub($b, $a): " + sub(b, a));

    println("add($a, $b): " + add(a, b));

    // the line "add(c, d);"
    // throws a compiler error 
    // because this function instead
    // not defined for two floats as
    // an input.

    // the line "sub(a, b);" will run,
    // but because they are uints it will
    // overflow because a < b.
    // 
    // to solve this problem, you can add overflow
    // protection in your function
    
    bool overflow;
    uint result = sub(a, b, &overflow);

    if(overflow){
        println("sub($a, $b) overflowed);
    } else {
        println("sub($a, $b) didn't overflow);
    }

    println("sub($a, $b): $result");
    return 0;
}

// a generic sub functions that 
// will use the subtract operator 
// on two variables of the same datatypes
// and return a varibale with the same
// datatype

var<T> sub(var<T> a, var<T> b){
    return a - b;
}

// take in two uints
// add them 
// and return a uint

uint add(uint a, uint b){
    return a + b;
}

uint sub(uint a, uint b){
    println("Im in 'uint sub()' instead of 'var<T> sub()'.");
    return a - b;
}

// in this example of overflow
uint sub(uint a, uint b, bool^ overflow){
    ^overflow = overflow(-, a, b);
    return a - b;
}